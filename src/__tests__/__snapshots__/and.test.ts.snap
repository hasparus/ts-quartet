// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`v.and Conflict with primitive 1`] = `
Object {
  "_": "function validator(value) {
  if (value !== 1) return false
  if (!(typeof value === 'number' && value % 2 === 0)) return false
  return true
}",
  "explanations": Array [],
  "pure": true,
}
`;

exports[`v.and Conflict with primitive 3`] = `
Object {
  "_": "function validator(value) {
  validator.explanations = []
  if (value !== 1) return false
  if (!(typeof value === 'number' && value % 2 === 0)) {
    validator.explanations.push(value)
    return false
  }
  return true
}",
  "explanations": Array [],
  "pure": false,
}
`;

exports[`v.and v.compileAnd() 1`] = `
Object {
  "_": "function () { return true; }",
  "explanations": Array [],
  "pure": true,
}
`;

exports[`v.and v.compileAnd({ a: funcWithoutHandle }, { b: funcWithHandle }) 1`] = `
Object {
  "_": "function validator(value) {
  validator.explanations = []
  if (value == null) return false
  if (!(typeof value.a === 'number' && value.a % 2 === 0)) return false
  if (value == null) return false
  if (!(typeof value.b === 'number' && value.b % 2 === 0)) {
    validator.explanations.push(value.b)
    return false
  }
  return true
}",
  "explanations": Array [],
  "pure": false,
}
`;

exports[`v.and v.compileAnd({ a: funcWithoutHandle, [v.rest]: funcWithoutHandle }, { b: funcWithHandle, [v.rest]: funcWithHandle }) 1`] = `
Object {
  "_": "function validator(value) {
  validator.explanations = []
  if (value == null) return false
  if (!(typeof value.a === 'number' && value.a % 2 === 0)) return false
  validator.keys = Object.keys(value)
  for (let i = 0; i < validator.keys.length; i++) {
    validator.key = validator.keys[i]
    if (validator.omitkeys[validator.key] === true) continue
    validator.elem = value[validator.key]
    if (!(typeof validator.elem === 'number' && validator.elem % 2 === 0)) return false
  }
              
  if (value == null) return false
  if (typeof value.b !== 'number' || value.b % 4 !== 0) {
    validator.explanations.push(value.b + ' is not 4k')
    return false
  }
  validator[\\"keys-1\\"] = Object.keys(value)
  for (let i = 0; i < validator[\\"keys-1\\"].length; i++) {
    validator[\\"key-1\\"] = validator[\\"keys-1\\"][i]
    if (validator[\\"omitkeys-1\\"][validator[\\"key-1\\"]] === true) continue
    validator[\\"elem-1\\"] = value[validator[\\"key-1\\"]]
    if (typeof validator[\\"elem-1\\"] !== 'number' || validator[\\"elem-1\\"] % 4 !== 0) {
      validator.explanations.push(validator[\\"elem-1\\"] + ' is not 4k')
      return false
    }
  }
              
  return true
}",
  "elem": undefined,
  "elem-1": undefined,
  "explanations": Array [],
  "key": undefined,
  "key-1": undefined,
  "keys": Array [],
  "keys-1": Array [],
  "omitkeys": Object {
    "a": true,
  },
  "omitkeys-1": Object {
    "b": true,
  },
  "pure": false,
}
`;

exports[`v.and v.compileAnd(1) 1`] = `
Object {
  "_": "function (value) { return value === c; }",
  "explanations": Array [],
  "pure": true,
}
`;

exports[`v.and v.compileAnd(1, 1) 1`] = `
Object {
  "_": "function validator(value) {
  if (value !== 1) return false
  if (value !== 1) return false
  return true
}",
  "explanations": Array [],
  "pure": true,
}
`;

exports[`v.and v.compileAnd(1, 1, 2) 1`] = `
Object {
  "_": "function validator(value) {
  if (value !== 1) return false
  if (value !== 1) return false
  if (value !== 2) return false
  return true
}",
  "explanations": Array [],
  "pure": true,
}
`;

exports[`v.and v.compileAnd(1, 2) 1`] = `
Object {
  "_": "function validator(value) {
  if (value !== 1) return false
  if (value !== 2) return false
  return true
}",
  "explanations": Array [],
  "pure": true,
}
`;

exports[`v.and v.compileAnd(func, []) 1`] = `
Object {
  "_": "function validator(value) {
  if (!(typeof value === 'number' && value % 2 === 0)) return false
  return false
  return true
}",
  "explanations": Array [],
  "pure": true,
}
`;

exports[`v.and v.compileAnd(func, [func]) 1`] = `
Object {
  "_": "function validator(value) {
  if ((typeof value !== 'number' || value % 2 !== 0)) return false
  if ((typeof value !== 'number' || value % 2 !== 0)) return false
  return true
}",
  "explanations": Array [],
  "pure": true,
}
`;

exports[`v.and v.compileAnd(func, [funcWithHandle, funcWithoutHandle]) 1`] = `
Object {
  "_": "function validator(value) {
  validator.explanations = []
  if (!(typeof value === 'number' && value % 2 === 0)) return false
  if (!validator.value(value)) {
    validator.explanations.push(...validator.value.explanations)
    return false
  }
  return true
}",
  "explanations": Array [],
  "pure": false,
  "value": "function validator(value) {
  validator.explanations = []
  if (typeof value === 'number' && value % 4 === 0) return true;
  if (typeof value === 'number' && value % 5 === 0) return true;
  validator.explanations.push(value + ' is not 4k')
  return false
}",
  "value.explanations": Array [],
  "value.pure": false,
}
`;

exports[`v.and v.compileAnd(func, [funcWithoutHandle, funcWithoutHandle]) 1`] = `
Object {
  "_": "function validator(value) {
  if ((typeof value !== 'number' || value % 2 !== 0)) return false
  if (!validator.value(value)) return false
  return true
}",
  "explanations": Array [],
  "pure": true,
  "value": "function validator(value) {
  if (typeof value === 'number' && value % 2 === 0) return true;
  if (typeof value === 'number' && value % 2 === 0) return true;
  return false
}",
  "value.explanations": Array [],
  "value.pure": true,
}
`;

exports[`v.and v.compileAnd(funcSchemaWithPrepare, funcWithoutPrepare) 1`] = `
Object {
  "_": "function validator(value) {
  if (!(typeof value === 'number' && value % validator.divider === 0)) return false
  if (!(typeof value === 'number' && value % 2 === 0)) return false
  return true
}",
  "divider": 2,
  "explanations": Array [],
  "pure": true,
}
`;

exports[`v.and v.compileAnd(funcWithHandle, funcWithoutHandle) 1`] = `
Object {
  "_": "function validator(value) {
  validator.explanations = []
  if (!(typeof value === 'number' && value % 2 === 0)) {
    validator.explanations.push(value)
    return false
  }
  if (!(typeof value === 'number' && value % 2 === 0)) return false
  return true
}",
  "explanations": Array [],
  "pure": false,
}
`;

exports[`v.and v.compileAnd(funcWithNot, funcWithoutNot) 1`] = `
Object {
  "_": "function validator(value) {
  if ((typeof value !== 'number' || value % 2 !== 0)) return false
  if (!(typeof value === 'number' && value % 2 === 0)) return false
  return true
}",
  "explanations": Array [],
  "pure": true,
}
`;
