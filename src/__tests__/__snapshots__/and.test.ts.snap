// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`v.and Conflict with primitive 1`] = `
Object {
  "_": "function validator(value) {
  if (value !== 1) return false
  if (!(typeof value === 'number' && value % 2 === 0)) return false
  return true
}",
  "explanations": Array [],
  "pure": true,
}
`;

exports[`v.and Conflict with primitive 3`] = `
Object {
  "_": "function validator(value) {
  validator.explanations = []
  if (value !== 1) return false
  if (!(typeof value === 'number' && value % 2 === 0)) {
    validator.explanations.push(value)
    return false
  }
  return true
}",
  "explanations": Array [],
  "pure": false,
}
`;

exports[`v.and v.compileAnd() 1`] = `
Object {
  "_": "function () { return true; }",
  "explanations": Array [],
  "pure": true,
}
`;

exports[`v.and v.compileAnd({ a: funcWithoutHandle }, { b: funcWithHandle }) 1`] = `
Object {
  "_": "function validator(value) {
  validator.explanations = []
  if (value == null) return false
  if (!(typeof value.a === 'number' && value.a % 2 === 0)) return false
  if (value == null) return false
  if (!(typeof value.b === 'number' && value.b % 2 === 0)) {
    validator.explanations.push(value.b)
    return false
  }
  return true
}",
  "explanations": Array [],
  "pure": false,
}
`;

exports[`v.and v.compileAnd({ a: funcWithoutHandle, [v.rest]: funcWithoutHandle }, { b: funcWithHandle, [v.rest]: funcWithHandle }) 1`] = `
Object {
  "_": "function validator(value) {
  validator.explanations = []
  if (!validator['value-0'](value)) return false
  if (!validator['value-1'](value)) {
    validator.explanations.push(...validator['value-1'].explanations)
    return false
  }
  return true
}",
  "explanations": Array [],
  "pure": false,
  "value-0": "function validator(value) {
  if (!validator.defined(value)) return false
  const keys = Object.keys(value)
  for (let i = 0; i < keys.length; i++) {
    const key = keys[i]
    if (validator.__propsWithSchemasDict[key] === true) continue
    if (!validator.checkRest(value[key])) return false
  }
  return true
}",
  "value-0.__propsWithSchemasDict": Object {
    "a": true,
  },
  "value-0.checkRest": "function validator(value) {
  return typeof value === 'number' && value % 2 === 0
}",
  "value-0.checkRest.explanations": Array [],
  "value-0.checkRest.pure": true,
  "value-0.defined": "function validator(value) {
  if (value == null) return false
  if (!(typeof value.a === 'number' && value.a % 2 === 0)) return false
  return true
}",
  "value-0.defined.explanations": Array [],
  "value-0.defined.pure": true,
  "value-0.explanations": Array [],
  "value-0.pure": true,
  "value-1": "function validator(value) {
  validator.explanations = []
  if (!validator.defined(value)) {
    validator.explanations.push(...validator.defined.explanations)
    return false
  }
  const keys = Object.keys(value)
  for (let i = 0; i < keys.length; i++) {
    const key = keys[i]
    if (validator.__propsWithSchemasDict[key] === true) continue
    if (!validator.checkRest(value[key])) {
      validator.explanations.push(...validator.checkRest.explanations)
      return false
    }
  }
  return true
}",
  "value-1.__propsWithSchemasDict": Object {
    "b": true,
  },
  "value-1.checkRest": "function validator(value) {
  validator.explanations = []
  if (typeof value === 'number' && value % 4 === 0) {
    return true
  }
  validator.explanations.push(value + ' is not 4k')
  return false
}",
  "value-1.checkRest.explanations": Array [],
  "value-1.checkRest.pure": false,
  "value-1.defined": "function validator(value) {
  validator.explanations = []
  if (value == null) return false
  if (typeof value.b !== 'number' || value.b % 4 !== 0) {
    validator.explanations.push(value.b + ' is not 4k')
    return false
  }
  return true
}",
  "value-1.defined.explanations": Array [],
  "value-1.defined.pure": false,
  "value-1.explanations": Array [],
  "value-1.pure": false,
}
`;

exports[`v.and v.compileAnd(1) 1`] = `
Object {
  "_": "function (value) { return value === c; }",
  "explanations": Array [],
  "pure": true,
}
`;

exports[`v.and v.compileAnd(1, 1) 1`] = `
Object {
  "_": "function validator(value) {
  if (value !== 1) return false
  if (value !== 1) return false
  return true
}",
  "explanations": Array [],
  "pure": true,
}
`;

exports[`v.and v.compileAnd(1, 1, 2) 1`] = `
Object {
  "_": "function validator(value) {
  if (value !== 1) return false
  if (value !== 1) return false
  if (value !== 2) return false
  return true
}",
  "explanations": Array [],
  "pure": true,
}
`;

exports[`v.and v.compileAnd(1, 2) 1`] = `
Object {
  "_": "function validator(value) {
  if (value !== 1) return false
  if (value !== 2) return false
  return true
}",
  "explanations": Array [],
  "pure": true,
}
`;

exports[`v.and v.compileAnd(func, []) 1`] = `
Object {
  "_": "function validator(value) {
  if (!(typeof value === 'number' && value % 2 === 0)) return false
  return false
  return true
}",
  "explanations": Array [],
  "pure": true,
}
`;

exports[`v.and v.compileAnd(func, [func]) 1`] = `
Object {
  "_": "function validator(value) {
  if ((typeof value !== 'number' || value % 2 !== 0)) return false
  if ((typeof value !== 'number' || value % 2 !== 0)) return false
  return true
}",
  "explanations": Array [],
  "pure": true,
}
`;

exports[`v.and v.compileAnd(func, [funcWithHandle, funcWithoutHandle]) 1`] = `
Object {
  "_": "function validator(value) {
  validator.explanations = []
  if (!(typeof value === 'number' && value % 2 === 0)) return false
  if (!validator['value-2'](value)) {
    validator.explanations.push(...validator['value-2'].explanations)
    return false
  }
  return true
}",
  "explanations": Array [],
  "pure": false,
  "value-2": "function validator(value) {
  validator.explanations = []
  if (typeof value === 'number' && value % 4 === 0) return true;
  if (typeof value === 'number' && value % 5 === 0) return true;
  validator.explanations.push(value + ' is not 4k')
  return false
}",
  "value-2.explanations": Array [],
  "value-2.pure": false,
}
`;

exports[`v.and v.compileAnd(func, [funcWithoutHandle, funcWithoutHandle]) 1`] = `
Object {
  "_": "function validator(value) {
  if ((typeof value !== 'number' || value % 2 !== 0)) return false
  if (!validator['value-3'](value)) return false
  return true
}",
  "explanations": Array [],
  "pure": true,
  "value-3": "function validator(value) {
  if (typeof value === 'number' && value % 2 === 0) return true;
  if (typeof value === 'number' && value % 2 === 0) return true;
  return false
}",
  "value-3.explanations": Array [],
  "value-3.pure": true,
}
`;

exports[`v.and v.compileAnd(funcSchemaWithPrepare, funcWithoutPrepare) 1`] = `
Object {
  "_": "function validator(value) {
  if (!(typeof value === 'number' && value % validator.divider === 0)) return false
  if (!(typeof value === 'number' && value % 2 === 0)) return false
  return true
}",
  "divider": 2,
  "explanations": Array [],
  "pure": true,
}
`;

exports[`v.and v.compileAnd(funcWithHandle, funcWithoutHandle) 1`] = `
Object {
  "_": "function validator(value) {
  validator.explanations = []
  if (!(typeof value === 'number' && value % 2 === 0)) {
    validator.explanations.push(value)
    return false
  }
  if (!(typeof value === 'number' && value % 2 === 0)) return false
  return true
}",
  "explanations": Array [],
  "pure": false,
}
`;

exports[`v.and v.compileAnd(funcWithNot, funcWithoutNot) 1`] = `
Object {
  "_": "function validator(value) {
  if ((typeof value !== 'number' || value % 2 !== 0)) return false
  if (!(typeof value === 'number' && value % 2 === 0)) return false
  return true
}",
  "explanations": Array [],
  "pure": true,
}
`;
