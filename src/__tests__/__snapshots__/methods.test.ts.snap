// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`methods and 1`] = `
Object {
  "_": "function validator(value) {
  return validator.and(value)
}",
  "and": "function validator(value) {
  if (typeof value !== 'number') return false
  if (!validator.custom(value)) return false
  return true
}",
  "and.custom": "function (e) { return e % 2 === 0; }",
  "and.explanations": Array [],
  "and.pure": true,
  "explanations": Array [],
  "pure": true,
}
`;

exports[`methods arrayOf 1`] = `
Object {
  "_": "function validator(value) {
  return validator.arr(value)
}",
  "arr": "function validator(value) {
  if (!value || !Array.isArray(value)) return false
  for (let i = 0; i < value.length; i++) {
    const elem = value[i]
    if (typeof elem !== 'number') return false
  }
  return true
}",
  "arr.explanations": Array [],
  "arr.pure": true,
  "explanations": Array [],
  "pure": true,
}
`;

exports[`methods boolean 1`] = `
Object {
  "_": "function validator(value) {
  return typeof value === 'boolean'
}",
  "explanations": Array [],
  "pure": true,
}
`;

exports[`methods function 1`] = `
Object {
  "_": "function validator(value) {
  return typeof value === 'function'
}",
  "explanations": Array [],
  "pure": true,
}
`;

exports[`methods max exclusive 1`] = `
Object {
  "_": "function validator(value) {
  return value < 5
}",
  "explanations": Array [],
  "pure": true,
}
`;

exports[`methods max inclusive 1`] = `
Object {
  "_": "function validator(value) {
  return value <= 5
}",
  "explanations": Array [],
  "pure": true,
}
`;

exports[`methods maxLength exclusive 1`] = `
Object {
  "_": "function validator(value) {
  return value && value.length < 5
}",
  "explanations": Array [],
  "pure": true,
}
`;

exports[`methods maxLength inclusive 1`] = `
Object {
  "_": "function validator(value) {
  return value && value.length <= 5
}",
  "explanations": Array [],
  "pure": true,
}
`;

exports[`methods min exclusive 1`] = `
Object {
  "_": "function validator(value) {
  return value > 5
}",
  "explanations": Array [],
  "pure": true,
}
`;

exports[`methods min inclusive 1`] = `
Object {
  "_": "function validator(value) {
  return value >= 5
}",
  "explanations": Array [],
  "pure": true,
}
`;

exports[`methods minLength exclusive 1`] = `
Object {
  "_": "function validator(value) {
  return value && value.length > 5
}",
  "explanations": Array [],
  "pure": true,
}
`;

exports[`methods minLength inclusive 1`] = `
Object {
  "_": "function validator(value) {
  return value && value.length >= 5
}",
  "explanations": Array [],
  "pure": true,
}
`;

exports[`methods negative 1`] = `
Object {
  "_": "function validator(value) {
  return value < 0
}",
  "explanations": Array [],
  "pure": true,
}
`;

exports[`methods number 1`] = `
Object {
  "_": "function validator(value) {
  return typeof value === 'number'
}",
  "explanations": Array [],
  "pure": true,
}
`;

exports[`methods positive 1`] = `
Object {
  "_": "function validator(value) {
  return value > 0
}",
  "explanations": Array [],
  "pure": true,
}
`;

exports[`methods safeInteger 1`] = `
Object {
  "_": "function validator(value) {
  return Number.isSafeInteger(value)
}",
  "explanations": Array [],
  "pure": true,
}
`;

exports[`methods string 1`] = `
Object {
  "_": "function validator(value) {
  return typeof value === 'string'
}",
  "explanations": Array [],
  "pure": true,
}
`;

exports[`methods symbol 1`] = `
Object {
  "_": "function validator(value) {
  return typeof value === 'symbol'
}",
  "explanations": Array [],
  "pure": true,
}
`;

exports[`methods test 1`] = `
Object {
  "_": "function validator(value) {
  return validator.tester.test(value)
}",
  "explanations": Array [],
  "pure": true,
  "tester": /\\[Aa\\]nd/,
}
`;
