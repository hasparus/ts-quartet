// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`compileObjectSchema Obj: toString string constant value 1`] = `
Object {
  "_": "function validator(value) {
  if (!value) return false
  if (validator.__validValues.a[value.a] !== true) return false
  return true
}",
  "__validValues": Object {
    "a": Object {
      "A": true,
    },
  },
  "explanations": Array [],
  "pure": true,
}
`;

exports[`compileObjectSchema empty obj 1`] = `
Object {
  "_": "function (v) { return !!v; }",
  "explanations": Array [],
  "pure": true,
}
`;

exports[`compileObjectSchema obj + obj 1`] = `
Object {
  "_": "function validator(value) {
  validator.explanations = []
  if (!value) return false
  if (!value.deep) return false
  if (value.deep.another !== validator['value.deep.another-0']) return false
  if (!value.deep.deep) return false
  if (value.deep.deep.A !== validator['value.deep.deep.A-0']) return false
  if (!(value.deep.deep.space === 'true')) {
    validator.explanations.push(value.deep.deep.space)
    return false
  }
  return true
}",
  "explanations": Array [],
  "pure": false,
  "value.deep.another-0": "B",
  "value.deep.deep.A-0": "A",
}
`;

exports[`compileObjectSchema obj with constant 1`] = `
Object {
  "_": "function validator(value) {
  if (!value) return false
  if (validator.__validValues.str[value.str] !== true) return false
  if (validator.__validValues.symb[value.symb] !== true) return false
  if (value.id !== 42) return false
  if (!Number.isNaN(value.nan)) return false
  if (value.inf !== Infinity) return false
  if (value.minf !== -Infinity) return false
  if (value.zero !== 0) return false
  if (value.f !== false) return false
  if (value.t !== true) return false
  return true
}",
  "__validValues": Object {
    "str": Object {
      "Andrew": true,
    },
    "symb": Object {
      Symbol(test): true,
    },
  },
  "explanations": Array [],
  "pure": true,
}
`;

exports[`compileObjectSchema obj with func 1`] = `
Object {
  "_": "function validator(value) {
  validator.explanations = []
  if (!value) return false
  if (value.id !== 42) {
    validator.explanations.push(value.id)
    return false
  }
  return true
}",
  "explanations": Array [
    43,
  ],
  "pure": false,
}
`;

exports[`compileObjectSchema obj with variants 1`] = `
Object {
  "_": "function validator(value) {
  if (!value) return false
  if (!validator['gender-0'](value.gender)) return false
  if (!validator['grade-0'](value.grade)) return false
  return true
}",
  "explanations": Array [],
  "gender-0": "function validator(value) {
  if (validator.__validValuesDict[value] === true) return true
  return false
}",
  "gender-0.__validValuesDict": Object {
    "female": true,
    "male": true,
  },
  "gender-0.explanations": Array [],
  "gender-0.pure": true,
  "grade-0": "function validator(value) {
  if (value === 1) return true
  if (value === 2) return true
  if (value === 3) return true
  if (value === 4) return true
  if (value === 5) return true
  if (value === 6) return true
  if (value === 7) return true
  if (value === 8) return true
  if (value === 9) return true
  if (value === 10) return true
  if (value === 11) return true
  return false
}",
  "grade-0.explanations": Array [],
  "grade-0.pure": true,
  "pure": true,
}
`;

exports[`compileObjectSchema obj: variant explanations 3`] = `
Object {
  "_": "function validator(value) {
  validator.explanations = []
  if (!value) return false
  if (!validator['var-0'](value.var)) {
    validator.explanations.push(...validator['var-0'].explanations)
    return false
  }
  return true
}",
  "explanations": Array [],
  "pure": false,
  "var-0": "function validator(value) {
  validator.explanations = []
  if (value === \\"A\\") return true;
  if (value === \\"B\\") return true;
  validator.explanations.push(\\"Is not A\\")
  validator.explanations.push(\\"Is not B\\")
  return false
}",
  "var-0.explanations": Array [],
  "var-0.pure": false,
}
`;
