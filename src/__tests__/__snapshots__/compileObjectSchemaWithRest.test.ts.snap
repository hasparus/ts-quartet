// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`compileObjectSchemaWithRest empty obj 4`] = `
Object {
  "_": "function validator(value) {
  validator.explanations = []
  if (!value) return false
  const keys = Object.keys(value)
  for (let i = 0; i < keys.length; i++) {
    const key = keys[i]
    if (!validator.checkRest(value[key])) {
      validator.explanations.push(...validator.checkRest.explanations)
      return false
    }
  }
  return true
}",
  "checkRest": "function validator(value) {
  validator.explanations = []
  if (value === \\"A\\") {
    return true
  }
  validator.explanations.push(\\"Is not A\\")
  return false
}",
  "checkRest.explanations": Array [
    "Is not A",
  ],
  "defined": "function (v) { return !!v; }",
  "defined.explanations": Array [],
  "explanations": Array [
    "Is not A",
  ],
}
`;

exports[`compileObjectSchemaWithRest obj + obj 1`] = `
Object {
  "_": "function validator(value) {
  validator.explanations = []
  if (!validator.defined(value)) {
    validator.explanations.push(...validator.defined.explanations)
    return false
  }
  const keys = Object.keys(value)
  for (let i = 0; i < keys.length; i++) {
    const key = keys[i]
    if (validator.__propsWithSchemasDict[key] === true) continue
    if (!validator.checkRest(value[key])) {
      validator.explanations.push(...validator.checkRest.explanations)
      return false
    }
  }
  return true
}",
  "__propsWithSchemasDict": Object {
    "deep": true,
  },
  "checkRest": "function (value) { return value === c; }",
  "checkRest.explanations": Array [],
  "defined": "function validator(value) {
  validator.explanations = []
  if (!value) return false
  if (!validator['deep-1'](value.deep)) {
    validator.explanations.push(...validator['deep-1'].explanations)
    return false
  }
  return true
}",
  "defined.deep-1": "function validator(value) {
  validator.explanations = []
  if (!validator.defined(value)) {
    validator.explanations.push(...validator.defined.explanations)
    return false
  }
  const keys = Object.keys(value)
  for (let i = 0; i < keys.length; i++) {
    const key = keys[i]
    if (validator.__propsWithSchemasDict[key] === true) continue
    if (!validator.checkRest(value[key])) {
      validator.explanations.push(...validator.checkRest.explanations)
      return false
    }
  }
  return true
}",
  "defined.deep-1.__propsWithSchemasDict": Object {
    "deep": true,
  },
  "defined.deep-1.checkRest": "function validator(value) {
  validator.explanations = []
  if (value === \\"B\\") {
    return true
  }
  validator.explanations.push(\\"Is not B\\")
  return false
}",
  "defined.deep-1.checkRest.explanations": Array [],
  "defined.deep-1.defined": "function validator(value) {
  validator.explanations = []
  if (!value) return false
  if (!validator['deep-0'](value.deep)) {
    validator.explanations.push(...validator['deep-0'].explanations)
    return false
  }
  return true
}",
  "defined.deep-1.defined.deep-0": "function validator(value) {
  validator.explanations = []
  if (!validator.defined(value)) {
    validator.explanations.push(...validator.defined.explanations)
    return false
  }
  const keys = Object.keys(value)
  for (let i = 0; i < keys.length; i++) {
    const key = keys[i]
    if (validator.__propsWithSchemasDict[key] === true) continue
    if (!validator.checkRest(value[key])) {
      validator.explanations.push(...validator.checkRest.explanations)
      return false
    }
  }
  return true
}",
  "defined.deep-1.defined.deep-0.__propsWithSchemasDict": Object {
    "space": true,
  },
  "defined.deep-1.defined.deep-0.checkRest": "function validator(value) {
  validator.explanations = []
  if (value === \\"A\\") {
    return true
  }
  validator.explanations.push(\\"Is not A\\")
  return false
}",
  "defined.deep-1.defined.deep-0.checkRest.explanations": Array [],
  "defined.deep-1.defined.deep-0.defined": "function validator(value) {
  validator.explanations = []
  if (!value) return false
  if (!(value.space === 'true')) {
    validator.explanations.push(value.space)
    return false
  }
  return true
}",
  "defined.deep-1.defined.deep-0.defined.explanations": Array [],
  "defined.deep-1.defined.deep-0.explanations": Array [],
  "defined.deep-1.defined.explanations": Array [],
  "defined.deep-1.explanations": Array [],
  "defined.explanations": Array [],
  "explanations": Array [],
}
`;

exports[`compileObjectSchemaWithRest obj with constant 1`] = `
Object {
  "_": "function validator(value) {
  validator.explanations = []
  if (!validator.defined(value)) {
    validator.explanations.push(...validator.defined.explanations)
    return false
  }
  const keys = Object.keys(value)
  for (let i = 0; i < keys.length; i++) {
    const key = keys[i]
    if (validator.__propsWithSchemasDict[key] === true) continue
    if (!validator.checkRest(value[key])) {
      validator.explanations.push(...validator.checkRest.explanations)
      return false
    }
  }
  return true
}",
  "__propsWithSchemasDict": Object {
    "f": true,
    "id": true,
    "inf": true,
    "minf": true,
    "nan": true,
    "str": true,
    "symb": true,
    "t": true,
    "zero": true,
  },
  "checkRest": "function validator(value) {
  return typeof value === 'string'
}",
  "checkRest.explanations": Array [],
  "defined": "function validator(value) {
  if (!value) return false
  if (validator.__validValues.str[value.str] !== true) return false
  if (validator.__validValues.symb[value.symb] !== true) return false
  if (value.id !== 42) return false
  if (!Number.isNaN(value.nan)) return false
  if (value.inf !== Infinity) return false
  if (value.minf !== -Infinity) return false
  if (value.zero !== 0) return false
  if (value.f !== false) return false
  if (value.t !== true) return false
  return true
}",
  "defined.__validValues": Object {
    "str": Object {
      "Andrew": true,
    },
    "symb": Object {
      Symbol(test): true,
    },
  },
  "defined.explanations": Array [],
  "explanations": Array [],
}
`;

exports[`compileObjectSchemaWithRest obj with func 1`] = `
Object {
  "_": "function validator(value) {
  validator.explanations = []
  if (!validator.defined(value)) {
    validator.explanations.push(...validator.defined.explanations)
    return false
  }
  const keys = Object.keys(value)
  for (let i = 0; i < keys.length; i++) {
    const key = keys[i]
    if (validator.__propsWithSchemasDict[key] === true) continue
    if (!validator.checkRest(value[key])) {
      validator.explanations.push(...validator.checkRest.explanations)
      return false
    }
  }
  return true
}",
  "__propsWithSchemasDict": Object {
    "id": true,
  },
  "checkRest": "function validator(value) {
  validator.explanations = []
  if (value === \\"A\\") {
    return true
  }
  validator.explanations.push(\\"Is not A\\")
  return false
}",
  "checkRest.explanations": Array [
    "Is not A",
  ],
  "defined": "function validator(value) {
  validator.explanations = []
  if (!value) return false
  if (value.id !== 42) {
    validator.explanations.push(value.id)
    return false
  }
  return true
}",
  "defined.explanations": Array [],
  "explanations": Array [
    "Is not A",
  ],
}
`;

exports[`compileObjectSchemaWithRest obj with variants 2`] = `
Object {
  "_": "function validator(value) {
  validator.explanations = []
  if (!validator.defined(value)) {
    validator.explanations.push(...validator.defined.explanations)
    return false
  }
  const keys = Object.keys(value)
  for (let i = 0; i < keys.length; i++) {
    const key = keys[i]
    if (validator.__propsWithSchemasDict[key] === true) continue
    if (!validator.checkRest(value[key])) {
      validator.explanations.push(...validator.checkRest.explanations)
      return false
    }
  }
  return true
}",
  "__propsWithSchemasDict": Object {
    "gender": true,
    "grade": true,
  },
  "checkRest": "function validator(value) {
  validator.explanations = []
  if (value === \\"A\\") return true;
  if (value === \\"B\\") return true;
  validator.explanations.push(\\"Is not A\\")
  validator.explanations.push(\\"Is not B\\")
  return false
}",
  "checkRest.explanations": Array [
    "Is not A",
    "Is not B",
  ],
  "defined": "function validator(value) {
  validator.explanations = []
  if (!value) return false
  if (!validator['gender-0'](value.gender)) {
    validator.explanations.push(...validator['gender-0'].explanations)
    return false
  }
  if (!validator['grade-0'](value.grade)) {
    validator.explanations.push(...validator['grade-0'].explanations)
    return false
  }
  return true
}",
  "defined.explanations": Array [],
  "defined.gender-0": "function validator(value) {
  if (validator.__validValuesDict[value] === true) return true
  return false
}",
  "defined.gender-0.__validValuesDict": Object {
    "female": true,
    "male": true,
  },
  "defined.gender-0.explanations": Array [],
  "defined.grade-0": "function validator(value) {
  if (value === 1) return true
  if (value === 2) return true
  if (value === 3) return true
  if (value === 4) return true
  if (value === 5) return true
  if (value === 6) return true
  if (value === 7) return true
  if (value === 8) return true
  if (value === 9) return true
  if (value === 10) return true
  if (value === 11) return true
  return false
}",
  "defined.grade-0.explanations": Array [],
  "explanations": Array [
    "Is not A",
    "Is not B",
  ],
}
`;

exports[`compileObjectSchemaWithRest obj: variant explanations 4`] = `
Object {
  "_": "function validator(value) {
  validator.explanations = []
  if (!validator.defined(value)) {
    validator.explanations.push(...validator.defined.explanations)
    return false
  }
  const keys = Object.keys(value)
  for (let i = 0; i < keys.length; i++) {
    const key = keys[i]
    if (validator.__propsWithSchemasDict[key] === true) continue
    if (!validator.checkRest(value[key])) {
      validator.explanations.push(...validator.checkRest.explanations)
      return false
    }
  }
  return true
}",
  "__propsWithSchemasDict": Object {
    "var": true,
  },
  "checkRest": "function validator(value) {
  validator.explanations = []
  if (value === \\"C\\") {
    return true
  }
  validator.explanations.push(\\"Is not C\\")
  return false
}",
  "checkRest.explanations": Array [
    "Is not C",
  ],
  "defined": "function validator(value) {
  validator.explanations = []
  if (!value) return false
  if (!validator['var-0'](value.var)) {
    validator.explanations.push(...validator['var-0'].explanations)
    return false
  }
  return true
}",
  "defined.explanations": Array [],
  "defined.var-0": "function validator(value) {
  validator.explanations = []
  if (value === \\"A\\") return true;
  if (value === \\"B\\") return true;
  validator.explanations.push(\\"Is not A\\")
  validator.explanations.push(\\"Is not B\\")
  return false
}",
  "defined.var-0.explanations": Array [],
  "explanations": Array [
    "Is not C",
  ],
}
`;
