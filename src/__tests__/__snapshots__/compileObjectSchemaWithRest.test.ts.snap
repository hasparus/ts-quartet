// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`compileObjectSchemaWithRest empty obj 4`] = `
Object {
  "_": "function validator(value) {
    validator.explanations = []
    if (!value) return false
    const keys = Object.keys(value)
    for (let i = 0; i < keys.length; i++) {
      const key = keys[i]
      if (!validator['rest-validator-0'](value[key])) {
        validator.explanations.push(...validator['rest-validator-0'].explanations)
        return false
      }
    }
    return true
  }",
  "defined-0": "function (value) { return value; }",
  "defined-0.explanations": Array [],
  "explanations": Array [
    "Is not A",
  ],
  "rest-validator-0": "function validator(value) {
  validator.explanations = []
  if (value === \\"A\\") {
    return true
  }
  validator.explanations.push(\\"Is not A\\")
  return false
}",
  "rest-validator-0.explanations": Array [
    "Is not A",
  ],
}
`;

exports[`compileObjectSchemaWithRest obj + obj 1`] = `
Object {
  "_": "function validator(value) {
    validator.explanations = []
    if (!validator['defined-6'](value)) {
      validator.explanations.push(...validator['defined-6'].explanations)
      return false
    }
    const keys = Object.keys(value)
    for (let i = 0; i < keys.length; i++) {
      const key = keys[i]
      if (validator.__propsWithSchemasDict[key] === true) continue
      if (!validator['rest-validator-4'](value[key])) {
        validator.explanations.push(...validator['rest-validator-4'].explanations)
        return false
      }
    }
    return true
  }",
  "__propsWithSchemasDict": Object {
    "deep": true,
  },
  "defined-6": "function validator(value) {
    validator.explanations = []
    if (!value) return false
    if (!validator['deep-1'](value.deep)) {
      validator.explanations.push(...validator['deep-1'].explanations)
      return false
    }
    return true
  }",
  "defined-6.deep-1": "function validator(value) {
    validator.explanations = []
    if (!validator['defined-5'](value)) {
      validator.explanations.push(...validator['defined-5'].explanations)
      return false
    }
    const keys = Object.keys(value)
    for (let i = 0; i < keys.length; i++) {
      const key = keys[i]
      if (validator.__propsWithSchemasDict[key] === true) continue
      if (!validator['rest-validator-5'](value[key])) {
        validator.explanations.push(...validator['rest-validator-5'].explanations)
        return false
      }
    }
    return true
  }",
  "defined-6.deep-1.__propsWithSchemasDict": Object {
    "deep": true,
  },
  "defined-6.deep-1.defined-5": "function validator(value) {
    validator.explanations = []
    if (!value) return false
    if (!validator['deep-0'](value.deep)) {
      validator.explanations.push(...validator['deep-0'].explanations)
      return false
    }
    return true
  }",
  "defined-6.deep-1.defined-5.deep-0": "function validator(value) {
    validator.explanations = []
    if (!validator['defined-4'](value)) {
      validator.explanations.push(...validator['defined-4'].explanations)
      return false
    }
    const keys = Object.keys(value)
    for (let i = 0; i < keys.length; i++) {
      const key = keys[i]
      if (validator.__propsWithSchemasDict[key] === true) continue
      if (!validator['rest-validator-6'](value[key])) {
        validator.explanations.push(...validator['rest-validator-6'].explanations)
        return false
      }
    }
    return true
  }",
  "defined-6.deep-1.defined-5.deep-0.__propsWithSchemasDict": Object {
    "space": true,
  },
  "defined-6.deep-1.defined-5.deep-0.defined-4": "function validator(value) {
    validator.explanations = []
    if (!value) return false
    if (!(value.space === 'true')) {
      validator.explanations.push(value.space)
      return false
    }
    return true
  }",
  "defined-6.deep-1.defined-5.deep-0.defined-4.explanations": Array [],
  "defined-6.deep-1.defined-5.deep-0.explanations": Array [],
  "defined-6.deep-1.defined-5.deep-0.rest-validator-6": "function validator(value) {
  validator.explanations = []
  if (value === \\"A\\") {
    return true
  }
  validator.explanations.push(\\"Is not A\\")
  return false
}",
  "defined-6.deep-1.defined-5.deep-0.rest-validator-6.explanations": Array [],
  "defined-6.deep-1.defined-5.explanations": Array [],
  "defined-6.deep-1.explanations": Array [],
  "defined-6.deep-1.rest-validator-5": "function validator(value) {
  validator.explanations = []
  if (value === \\"B\\") {
    return true
  }
  validator.explanations.push(\\"Is not B\\")
  return false
}",
  "defined-6.deep-1.rest-validator-5.explanations": Array [],
  "defined-6.explanations": Array [],
  "explanations": Array [],
  "rest-validator-4": "function (value) { return value === c; }",
  "rest-validator-4.explanations": Array [],
}
`;

exports[`compileObjectSchemaWithRest obj with constant 1`] = `
Object {
  "_": "function validator(value) {
    validator.explanations = []
    if (!validator['defined-2'](value)) {
      validator.explanations.push(...validator['defined-2'].explanations)
      return false
    }
    const keys = Object.keys(value)
    for (let i = 0; i < keys.length; i++) {
      const key = keys[i]
      if (validator.__propsWithSchemasDict[key] === true) continue
      if (!validator['rest-validator-2'](value[key])) {
        validator.explanations.push(...validator['rest-validator-2'].explanations)
        return false
      }
    }
    return true
  }",
  "__propsWithSchemasDict": Object {
    "f": true,
    "id": true,
    "inf": true,
    "minf": true,
    "nan": true,
    "str": true,
    "symb": true,
    "t": true,
    "zero": true,
  },
  "defined-2": "function validator(value) {
    if (!value) return false
    if (validator.__validValues.str[value.str] !== true) return false
    if (validator.__validValues.symb[value.symb] !== true) return false
    if (value.id !== 42) return false
    if (!Number.isNaN(value.nan)) return false
    if (value.inf !== Infinity) return false
    if (value.minf !== -Infinity) return false
    if (value.zero !== 0) return false
    if (value.f !== false) return false
    if (value.t !== true) return false
    return true
  }",
  "defined-2.__validValues": Object {
    "str": Object {
      "Andrew": true,
    },
    "symb": Object {
      Symbol(test): true,
    },
  },
  "defined-2.explanations": Array [],
  "explanations": Array [],
  "rest-validator-2": "function validator(value) {
  return typeof value === 'string'
}",
  "rest-validator-2.explanations": Array [],
}
`;

exports[`compileObjectSchemaWithRest obj with func 1`] = `
Object {
  "_": "function validator(value) {
    validator.explanations = []
    if (!validator['defined-1'](value)) {
      validator.explanations.push(...validator['defined-1'].explanations)
      return false
    }
    const keys = Object.keys(value)
    for (let i = 0; i < keys.length; i++) {
      const key = keys[i]
      if (validator.__propsWithSchemasDict[key] === true) continue
      if (!validator['rest-validator-1'](value[key])) {
        validator.explanations.push(...validator['rest-validator-1'].explanations)
        return false
      }
    }
    return true
  }",
  "__propsWithSchemasDict": Object {
    "id": true,
  },
  "defined-1": "function validator(value) {
    validator.explanations = []
    if (!value) return false
    if (value.id !== 42) {
      validator.explanations.push(value.id)
      return false
    }
    return true
  }",
  "defined-1.explanations": Array [],
  "explanations": Array [
    "Is not A",
  ],
  "rest-validator-1": "function validator(value) {
  validator.explanations = []
  if (value === \\"A\\") {
    return true
  }
  validator.explanations.push(\\"Is not A\\")
  return false
}",
  "rest-validator-1.explanations": Array [
    "Is not A",
  ],
}
`;

exports[`compileObjectSchemaWithRest obj with variants 2`] = `
Object {
  "_": "function validator(value) {
    validator.explanations = []
    if (!validator['defined-3'](value)) {
      validator.explanations.push(...validator['defined-3'].explanations)
      return false
    }
    const keys = Object.keys(value)
    for (let i = 0; i < keys.length; i++) {
      const key = keys[i]
      if (validator.__propsWithSchemasDict[key] === true) continue
      if (!validator['rest-validator-3'](value[key])) {
        validator.explanations.push(...validator['rest-validator-3'].explanations)
        return false
      }
    }
    return true
  }",
  "__propsWithSchemasDict": Object {
    "gender": true,
    "grade": true,
  },
  "defined-3": "function validator(value) {
    validator.explanations = []
    if (!value) return false
    if (!validator['gender-0'](value.gender)) {
      validator.explanations.push(...validator['gender-0'].explanations)
      return false
    }
    if (!validator['grade-0'](value.grade)) {
      validator.explanations.push(...validator['grade-0'].explanations)
      return false
    }
    return true
  }",
  "defined-3.explanations": Array [],
  "defined-3.gender-0": "function validator(value) {
    if (validator.__validValuesDict[value] === true) return true
    return false
  }",
  "defined-3.gender-0.__validValuesDict": Object {
    "female": true,
    "male": true,
  },
  "defined-3.gender-0.explanations": Array [],
  "defined-3.grade-0": "function validator(value) {
    if (value === 1) return true
    if (value === 2) return true
    if (value === 3) return true
    if (value === 4) return true
    if (value === 5) return true
    if (value === 6) return true
    if (value === 7) return true
    if (value === 8) return true
    if (value === 9) return true
    if (value === 10) return true
    if (value === 11) return true
    return false
  }",
  "defined-3.grade-0.explanations": Array [],
  "explanations": Array [
    "Is not A",
    "Is not B",
  ],
  "rest-validator-3": "function validator(value) {
    validator.explanations = []
    if (value === \\"A\\") return true;
    if (value === \\"B\\") return true;
    validator.explanations.push(\\"Is not A\\")
    validator.explanations.push(\\"Is not B\\")
    return false
  }",
  "rest-validator-3.explanations": Array [
    "Is not A",
    "Is not B",
  ],
}
`;

exports[`compileObjectSchemaWithRest obj: variant explanations 4`] = `
Object {
  "_": "function validator(value) {
    validator.explanations = []
    if (!validator['defined-7'](value)) {
      validator.explanations.push(...validator['defined-7'].explanations)
      return false
    }
    const keys = Object.keys(value)
    for (let i = 0; i < keys.length; i++) {
      const key = keys[i]
      if (validator.__propsWithSchemasDict[key] === true) continue
      if (!validator['rest-validator-7'](value[key])) {
        validator.explanations.push(...validator['rest-validator-7'].explanations)
        return false
      }
    }
    return true
  }",
  "__propsWithSchemasDict": Object {
    "var": true,
  },
  "defined-7": "function validator(value) {
    validator.explanations = []
    if (!value) return false
    if (!validator['var-0'](value.var)) {
      validator.explanations.push(...validator['var-0'].explanations)
      return false
    }
    return true
  }",
  "defined-7.explanations": Array [],
  "defined-7.var-0": "function validator(value) {
    validator.explanations = []
    if (value === \\"A\\") return true;
    if (value === \\"B\\") return true;
    validator.explanations.push(\\"Is not A\\")
    validator.explanations.push(\\"Is not B\\")
    return false
  }",
  "defined-7.var-0.explanations": Array [],
  "explanations": Array [
    "Is not C",
  ],
  "rest-validator-7": "function validator(value) {
  validator.explanations = []
  if (value === \\"C\\") {
    return true
  }
  validator.explanations.push(\\"Is not C\\")
  return false
}",
  "rest-validator-7.explanations": Array [
    "Is not C",
  ],
}
`;
