// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`v(object) 00. v({}) 1`] = `
Object {
  "_": "function (v) { return v != null; }",
  "explanations": Array [],
  "pure": true,
}
`;

exports[`v(object) 01. v({ a: null }) 1`] = `
Object {
  "_": "function validator(value) {
  if (value == null) return false
  if (value.a !== null) return false
  return true
}",
  "explanations": Array [],
  "pure": true,
}
`;

exports[`v(object) 02. v({ a: undefined }) 1`] = `
Object {
  "_": "function validator(value) {
  if (value == null) return false
  if (value.a !== undefined) return false
  return true
}",
  "explanations": Array [],
  "pure": true,
}
`;

exports[`v(object) 03. v({ a: NaN }) 1`] = `
Object {
  "_": "function validator(value) {
  if (value == null) return false
  if (!Number.isNaN(value.a)) return false
  return true
}",
  "explanations": Array [],
  "pure": true,
}
`;

exports[`v(object) 04. v({ a: 42 }) 1`] = `
Object {
  "_": "function validator(value) {
  if (value == null) return false
  if (value.a !== 42) return false
  return true
}",
  "explanations": Array [],
  "pure": true,
}
`;

exports[`v(object) 05. v({ a: "true" }) 1`] = `
Object {
  "_": "function validator(value) {
  if (value == null) return false
  if (value.a !== 'true') return false
  return true
}",
  "explanations": Array [],
  "pure": true,
}
`;

exports[`v(object) 06. v({ a: "false" }) 1`] = `
Object {
  "_": "function validator(value) {
  if (value == null) return false
  if (value.a !== 'false') return false
  return true
}",
  "explanations": Array [],
  "pure": true,
}
`;

exports[`v(object) 07. v({ a: "test" }) 1`] = `
Object {
  "_": "function validator(value) {
  if (value == null) return false
  if (validator.__validValues.a[value.a] !== true) return false
  return true
}",
  "__validValues": Object {
    "a": Object {
      "test": true,
    },
  },
  "explanations": Array [],
  "pure": true,
}
`;

exports[`v(object) 08. v({ a: Symbol.for("test") }) 1`] = `
Object {
  "_": "function validator(value) {
  if (value == null) return false
  if (validator.__validValues.a[value.a] !== true) return false
  return true
}",
  "__validValues": Object {
    "a": Object {
      Symbol(test): true,
    },
  },
  "explanations": Array [],
  "pure": true,
}
`;

exports[`v(object) 09. v({ a: true }) 1`] = `
Object {
  "_": "function validator(value) {
  if (value == null) return false
  if (value.a !== true) return false
  return true
}",
  "explanations": Array [],
  "pure": true,
}
`;

exports[`v(object) 10. v({ a: false }) 1`] = `
Object {
  "_": "function validator(value) {
  if (value == null) return false
  if (value.a !== false) return false
  return true
}",
  "explanations": Array [],
  "pure": true,
}
`;

exports[`v(object) 11. v({ a: funcWithPrepare }) 1`] = `
Object {
  "_": "function validator(value) {
  if (value == null) return false
  if (!(typeof value.a === 'number' && value.a % validator.divider === 0)) return false
  return true
}",
  "divider": 2,
  "explanations": Array [],
  "pure": true,
}
`;

exports[`v(object) 12. v({ a: funcWithoutPrepare }) 1`] = `
Object {
  "_": "function validator(value) {
  if (value == null) return false
  if (!(typeof value.a === 'number' && value.a % 2 === 0)) return false
  return true
}",
  "explanations": Array [],
  "pure": true,
}
`;

exports[`v(object) 13. v({ a: funcWithHandle }) 1`] = `
Object {
  "_": "function validator(value) {
  validator.explanations = []
  if (value == null) return false
  if ((typeof value.a !== 'number' || value.a % 2 !== 0)) {
    validator.explanations.push(value.a)
    return false
  }
  return true
}",
  "explanations": Array [],
  "pure": false,
}
`;

exports[`v(object) 15. v({ a: { b: pureFunc } }) 1`] = `
Object {
  "_": "function validator(value) {
  if (value == null) return false
  if (value.a == null) return false
  if (!(typeof value.a.b === 'number' && value.a.b % 2 === 0)) return false
  return true
}",
  "explanations": Array [],
  "pure": true,
}
`;

exports[`v(object) 16. v({ a: { b: impureFunc } }) 1`] = `
Object {
  "_": "function validator(value) {
  validator.explanations = []
  if (value == null) return false
  if (value.a == null) return false
  if ((typeof value.a.b !== 'number' || value.a.b % 2 !== 0)) {
    validator.explanations.push(value.a.b)
    return false
  }
  return true
}",
  "explanations": Array [],
  "pure": false,
}
`;

exports[`v(object) 17. v({ a: { b: pureFunc }, c: pureFunc }) 1`] = `
Object {
  "_": "function validator(value) {
  if (value == null) return false
  if (value.a == null) return false
  if (!(typeof value.a.b === 'number' && value.a.b % 2 === 0)) return false
  if (!(typeof value.c === 'number' && value.c % 2 === 0)) return false
  return true
}",
  "explanations": Array [],
  "pure": true,
}
`;
